// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum EUserRoles {
  ADMIN
  USER
}

enum FixedIncomeTypes {
  CDB
  CDI
  IPCA
  PREFIXADO
  LCI
  LCA
  LC
  LF
  CRI
  CRA
  Debentures
  DPGE
  Outros
}

enum ETransactionType {
  INCOME
  SPENDING
}

model User {
  id                          String                        @id @default(uuid())
  email                       String                        @unique
  password                    String
  name                        String?
  role                        EUserRoles                    @default(USER)
  accounts                    Account[]
  incomesAndSpendings         IncomesAndSpendings[]
  incomeAndSpendingCategories IncomeAndSpendingCategories[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Account {
  id                  String                @id @default(uuid())
  name                String
  description         String?
  accountNumber       String?
  accountName         String?
  bankCode            String?
  userId              String
  balance             Float                 @default(0)
  user                User                  @relation(fields: [userId], references: [id])
  incomesAndSpendings IncomesAndSpendings[]

  senderAccount   Transaction[] @relation(name: "SenderAccount")
  receiverAccount Transaction[] @relation(name: "ReceiverAccount")

  createdAt                    DateTime                       @default(now())
  updatedAt                    DateTime                       @updatedAt
  InvestmentFixedIncome        InvestmentFixedIncome[]
  InvestmentStocks             InvestmentStocks[]
  StockAndRealStateTransaction StockAndRealStateTransaction[]

  @@map("accounts")
}

model Currency {
  id                  String                @id @default(uuid())
  name                String
  description         String?
  symbol              String?
  incomesAndSpendings IncomesAndSpendings[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("currencies")
}

model IncomeAndSpendingCategories {
  id                  String                @id @default(uuid())
  name                String
  description         String?
  symbol              String?
  incomesAndSpendings IncomesAndSpendings[]
  maxAmountPerMonth   Float?
  userId              String

  user User @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("income_and_spending_categories")
}

model IncomesAndSpendings {
  id                     String                      @id @default(uuid())
  name                   String
  description            String?
  symbol                 String?
  amount                 Float
  date                   DateTime
  userId                 String
  isScheduled            Boolean                     @default(false)
  scheduleDate           DateTime?
  user                   User                        @relation(fields: [userId], references: [id])
  categoryId             String
  category               IncomeAndSpendingCategories @relation(fields: [categoryId], references: [id])
  accountId              String
  account                Account                     @relation(fields: [accountId], references: [id])
  currencyId             String
  currency               Currency                    @relation(fields: [currencyId], references: [id])
  type                   ETransactionType
  spendingNecessiteGrade Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("income_and_spending")
}

model Transaction {
  id          String   @id @default(uuid())
  name        String
  description String?
  amount      Float
  date        DateTime

  sender            Account  @relation("SenderAccount", fields: [senderAccountId], references: [id])
  senderAccountId   String
  receiver          Account? @relation("ReceiverAccount", fields: [receiverAccountId], references: [id])
  receiverAccountId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("transaction")
}

model InvestmentFixedIncome {
  id String @id @default(uuid())

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  investmentStartDate DateTime
  investmentDueDate   DateTime

  incomeTaxPercentage Float

  amount Float

  type FixedIncomeTypes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("investment_fixed_income")
}

model InvestmentStocks {
  id String @id @default(uuid())

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  investmentStartDate DateTime
  investmentDueDate   DateTime

  price        Float
  stocksAmount Float

  type FixedIncomeTypes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("investment_stocks")
}

model StockAndRealStateTransaction {
  id           String   @id @default(uuid())
  name         String
  description  String?
  price        Float
  stocksAmount Float
  date         DateTime

  account   Account @relation(fields: [accountId], references: [id])
  accountId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stock_and_real_state_transactions")
}
